<% content_for :head do %>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
<% end %>

<div class="container mt-4">
  <div class="row">
    <div class="col">
      <h1>Lead <%= @current_snapshot.lead_id %></h1>
    </div>
  </div>

  <!-- Overview Card -->
  <div class="card mb-4">
    <div class="card-header">
      <h5 class="card-title mb-0">Overview</h5>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-4">
          <h2 class="display-4"><%= @current_snapshot.total_score %></h2>
          <p class="text-muted">Current Score</p>
        </div>
        <div class="col-md-4">
          <% score_change = @current_snapshot.total_score - @current_snapshot.previous_score %>
          <h2 class="display-4 <%= score_change >= 0 ? 'text-success' : 'text-danger' %>">
            <%= score_change >= 0 ? '+' : '' %><%= score_change %>
          </h2>
          <p class="text-muted">Score Change</p>
        </div>
        <div class="col-md-4">
          <h2 class="display-4"><%= time_ago_in_words(@current_snapshot.calculated_at) %></h2>
          <p class="text-muted">Last Updated</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Current Score Breakdown -->
  <div class="card mb-4">
    <div class="card-header">
      <h5 class="card-title mb-0">Score Breakdown</h5>
    </div>
    <div class="card-body">
      <%= render 'dimension_scores_table', dimension_scores: @current_snapshot.dimension_scores %>
    </div>
  </div>

  <!-- Score History Chart -->
  <div class="card mb-4">
    <div class="card-header">
      <h5 class="card-title mb-0">Score History Chart</h5>
    </div>
    <div class="card-body">
      <canvas id="scoreChart"></canvas>
    </div>
  </div>


  <!-- Historical Scores -->
  <div class="card">
    <div class="card-header">
      <h5 class="card-title mb-0">Score History</h5>
    </div>
    <div class="card-body p-0">
      <div class="table-responsive">
        <table class="table mb-0">
          <thead>
            <tr>
              <th>Date</th>
              <th>Score</th>
              <th>Change</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            <% @lead_snapshots.each do |snapshot| %>
              <tr>
                <td><%= snapshot.calculated_at.strftime("%Y-%m-%d %H:%M") %></td>
                <td><%= snapshot.total_score %></td>
                <td>
                  <% change = snapshot.total_score - snapshot.previous_score %>
                  <span class="<%= change >= 0 ? 'text-success' : 'text-danger' %>">
                    <%= change >= 0 ? '+' : '' %><%= change %>
                  </span>
                </td>
                <td>
                  <button class="btn btn-sm btn-outline-secondary"
                          data-bs-toggle="collapse"
                          data-bs-target="#snapshot-<%= snapshot.id %>">
                    Details
                  </button>
                </td>
              </tr>
              <tr>
                <td colspan="4" class="p-0">
                  <div id="snapshot-<%= snapshot.id %>" class="collapse">
                    <div class="p-3 bg-light">
                      <%= render 'dimension_scores_table', dimension_scores: snapshot.dimension_scores %>
                    </div>
                  </div>
                </td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>
    </div>
    <div class="card-footer">
      <nav class="d-flex justify-content-center">
        <%= paginate @lead_snapshots, theme: 'bootstrap-5' %>
      </nav>
    </div>
  </div>
</div>

<%= javascript_tag do %>
  document.addEventListener('turbo:load', function() {
    const ctx = document.getElementById('scoreChart').getContext('2d');

    const chartData = <%= raw @chart_data.to_json %>;

    // Prepare datasets
    const datasets = [{
      label: 'Total Score',
      data: chartData.map(d => ({ x: d.date, y: d.total_score })),
      borderColor: 'rgb(75, 192, 192)',
      tension: 0.1
    }];

    // Add dimension scores
    if (chartData.length > 0) {
      const dimensions = Object.keys(chartData[0].dimensions);
      const colors = [
        'rgb(255, 99, 132)',   // red
        'rgb(54, 162, 235)',   // blue
        'rgb(255, 206, 86)',   // yellow
        'rgb(75, 192, 192)',   // teal
        'rgb(153, 102, 255)',  // purple
        'rgb(255, 159, 64)'    // orange
      ];

      dimensions.forEach((dimension, index) => {
        datasets.push({
          label: dimension,
          data: chartData.map(d => ({
            x: d.date,
            y: parseInt(d.dimensions[dimension].score)
          })),
          borderColor: colors[index % colors.length],
          tension: 0.1
        });
      });
    }

    new Chart(ctx, {
      type: 'line',
      data: {
        datasets: datasets
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
          mode: 'index'
        },
        scales: {
          x: {
            type: 'time',
            time: {
              unit: 'day'
            },
            title: {
              display: true,
              text: 'Date'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Score'
            },
            beginAtZero: true
          }
        },
        plugins: {
          legend: {
            position: 'top',
            onClick: function(e, legendItem, legend) {
              const index = legendItem.datasetIndex;
              const ci = legend.chart;
              if (ci.isDatasetVisible(index)) {
                ci.hide(index);
                legendItem.hidden = true;
              } else {
                ci.show(index);
                legendItem.hidden = false;
              }
            }
          },
          tooltip: {
            enabled: true
          }
        }
      }
    });
  });
<% end %>